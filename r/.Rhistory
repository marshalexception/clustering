n<-c(n, y)
}
return(n)
}
setids <- function(integer) {
n <- matrix(c(integer), dimnames = list(graphs))
return(n)
}
### Vectors
#k-medoid
fviz_nbclust(vectors, pam, k.max = 18)
intern <- clValid(vectors_matrix, 18, clMethods=c("pam"),
validation="internal")
summary(intern)
tmp <- eclust(vectors_matrix, k = 18, "pam", graph = FALSE)
tmp$silinfo
summary(intern)
tmp$silinfo
summary(intern)
### Vectors
#k-medoid
fviz_nbclust(vectors, pam, k.max = 18)
intern <- clValid(vectors_matrix, 5, clMethods=c("pam"),
validation="internal")
summary(intern)
intern <- clValid(vectors_matrix, 4, clMethods=c("pam"),
validation="internal")
summary(intern)
### Vectors
#k-medoid
fviz_nbclust(vectors, pam, k.max = 18)
intern <- clValid(vectors_matrix, 18, clMethods=c("pam"),
validation="internal")
summary(intern)
#
#agnes
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "single")
intern <- clValid(vectors_matrix, 2, clMethods=c("agnes"),
validation="internal", method = "single")
summary(intern)
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "complete")
intern <- clValid(vectors_matrix, 16, clMethods=c("agnes"),
validation="internal", method = "complete")
summary(intern)
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "average")
intern <- clValid(vectors_matrix, 2, clMethods=c("agnes"),
validation="internal", method = "average")
summary(intern)
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "ward.D2")
intern <- clValid(vectors_matrix, 5, clMethods=c("agnes"),
validation="internal", method = "ward")
summary(intern)
library(data.table)
library(cluster)
library(factoextra)
library(clValid) #validation
# combine graph names to one list
combineListsAsOne <-function(list1, list2){
n <- c()
for(x in list1){
n<-c(n, x)
}
for(y in list2){
n<-c(n, y)
}
return(n)
}
setids <- function(integer) {
n <- matrix(c(integer), dimnames = list(graphs))
return(n)
}
#graphs numbered
graphs <- combineListsAsOne(list(0:86), NULL)
### Vectors
#k-medoid
fviz_nbclust(vectors, pam, k.max = 18)
intern <- clValid(vectors_matrix, 18, clMethods=c("pam"),
validation="internal")
summary(intern)
#single, average schlechte Ergebnisse: Cluster bestehen nur aus 1 Graph
vectors_kmedoid <- eclust(vectors, k = 18, "pam", graph = FALSE)
vectors_kmedoid$silinfo
fviz_dend(vectors_kmedoid)
#single, average schlechte Ergebnisse: Cluster bestehen nur aus 1 Graph
vectors_kmedoid <- eclust(vectors_matrix, k = 18, "pam", graph = FALSE)
vectors_kmedoid$silinfo
#single, average schlechte Ergebnisse: Cluster bestehen nur aus 1 Graph
vectors_kmedoid <- eclust(vectors, k = 18, "pam", graph = FALSE)
vectors_kmedoid$clustering
t <- setids(vectors_kmedoid$clustering)
t
ta.table)
library(cluster)
library(factoextra)
library(cl
library(data.table)
library(cluster)
library(factoextra)
library(clValid) #validation
t
vec_medoid <- eclust(vectors, k = 18, "pam", graph = FALSE)
vec_medoid$silinfo
vm <- setids(vec_medoid$cluster)
vm
vec_medoid <- eclust(vectors, k = 18, "pam", graph = FALSE)
fviz_cluster(vec_medoid)
#
#agnes
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "single")
intern <- clValid(vectors_matrix, 2, clMethods=c("agnes"),
validation="internal", method = "single")
summary(intern)
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "complete")
intern <- clValid(vectors_matrix, 16, clMethods=c("agnes"),
validation="internal", method = "complete")
vec_agnes <- eclust(vectors, k = 18, "agnes", graph = FALSE, hc_method = "complete")
fviz_dend(vec_agnes)
vec_agnes <- eclust(vectors, k = 18, "agnes", graph = FALSE, hc_method = "single")
fviz_dend(vec_agnes)
vectors_matrix <- as.matrix(vectors, dimnames = list(graphs))
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "ward.D2")
intern <- clValid(vectors_matrix, 5, clMethods=c("agnes"),
validation="internal", method = "ward")
summary(intern)
library(data.table)
library(cluster)
library(factoextra)
library(clValid) #validation
# combine graph names to one list
combineListsAsOne <-function(list1, list2){
n <- c()
for(x in list1){
n<-c(n, x)
}
for(y in list2){
n<-c(n, y)
}
return(n)
}
#ids für die graphen setzen
setids <- function(integer) {
n <- matrix(c(integer), dimnames = list(graphs))
return(n)
}
#graphs numbered
graphs <- combineListsAsOne(list(0:86), NULL)
### data ###
min_symmetrized <- fread("min_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
max_symmetrized <- fread("max_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
avg_symmetrized <- fread("avg_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
vectors <- fread("vectors_lenz.txt", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
min_matrix <- matrix(c(min_matrix), nr = 87, dimnames = list(graphs))
max_matrix <- matrix(c(max_matrix), nr = 87, dimnames = list(graphs))
avg_matrix <- matrix(c(avg_matrix), nr = 87, dimnames = list(graphs))
vectors_matrix <- as.matrix(vectors)
######### min
### k-medoid
fviz_nbclust(min_symmetrized, pam, k.max = 18)
intern <- clValid(min_matrix, 2, clMethods=c("pam"),
validation="internal")
summary(intern)
# k = Anzahl Themen
c <- eclust(min_symmetrized, k = 5, "pam", graph = FALSE)
index <- setids(c$clustering)
index
#
###
### agnes
# single
fviz_nbclust(min_symmetrized, hcut, k.max = 18, hc_method = "single")
intern <- clValid(min_matrix, 2, clMethods=c("agnes"),
validation="internal", method = "single")
summary(intern)
c <- eclust(min_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "single")
index <- setids(c$cluster)
index
#
# complete
fviz_nbclust(min_symmetrized, hcut, k.max = 18, hc_method = "complete")
intern <- clValid(min_matrix, 4, clMethods=c("agnes"),
validation="internal", method = "complete")
summary(intern)
c <- eclust(min_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
#
# average
fviz_nbclust(min_symmetrized, hcut, k.max = 18, hc_method = "average")
intern <- clValid(min_matrix, 2, clMethods=c("agnes"),
validation="internal", method = "average")
summary(intern)
c <- eclust(min_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
c <- eclust(min_symmetrized, k = 2, "agnes", graph = FALSE, hc_method = "ward")
c$silinfo
#
# ward
fviz_nbclust(min_symmetrized, hcut, k.max = 18, hc_method = "ward.D2")
c <- eclust(min_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "ward")
index <- setids(c$cluster)
index
#
###
#agnes
# single
fviz_nbclust(max_symmetrized, hcut, k.max = 18, hc_method = "single")
c <- eclust(max_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "single")
index <- setids(c$cluster)
index
library(data.table)
library(cluster)
library(factoextra)
library(clValid) #validation
# combine graph names to one list
combineListsAsOne <-function(list1, list2){
n <- c()
for(x in list1){
n<-c(n, x)
}
for(y in list2){
n<-c(n, y)
}
return(n)
}
#ids für die graphen setzen
setids <- function(integer) {
n <- matrix(c(integer), dimnames = list(graphs))
return(n)
}
#graphs numbered
graphs <- combineListsAsOne(list(0:86), NULL)
### data ###
min_symmetrized <- fread("min_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
max_symmetrized <- fread("max_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
avg_symmetrized <- fread("avg_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
vectors <- fread("vectors_lenz.txt", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
min_matrix <- matrix(c(min_matrix), nr = 87, dimnames = list(graphs))
max_matrix <- matrix(c(max_matrix), nr = 87, dimnames = list(graphs))
avg_matrix <- matrix(c(avg_matrix), nr = 87, dimnames = list(graphs))
vectors_matrix <- as.matrix(vectors)
######### min
### k-medoid
fviz_nbclust(min_symmetrized, pam, k.max = 18)
c <- eclust(max_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "single")
index <- setids(c$cluster)
index
c <- eclust(max_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
c <- eclust(max_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
c <- eclust(max_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "ward")
index <- setids(c$cluster)
index
c <- eclust(avg_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "single")
index <- setids(c$cluster)
#
### agnes
# single
fviz_nbclust(avg_symmetrized, hcut, k.max = 18, hc_method = "single")
index <- setids(c$cluster)
index
#
# complete
fviz_nbclust(avg_symmetrized, hcut, k.max = 18, hc_method = "complete")
c <- eclust(avg_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
#
# average
fviz_nbclust(avg_symmetrized, hcut, k.max = 18, hc_method = "average")
c <- eclust(avg_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
c <- eclust(avg_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
#
# ward
fviz_nbclust(avg_symmetrized, hcut, k.max = 18, hc_method = "ward.D2")
c <- eclust(avg_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "ward")
index <- setids(c$cluster)
index
intern <- clValid(vectors_matrix, 2, clMethods=c("agnes"),
validation="internal", method = "single")
#
### agnes
# single
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "single")
c <- eclust(vectors, k = 5, "agnes", graph = FALSE, hc_method = "single")
index <- setids(c$cluster)
index
c <- eclust(vectors_matrix, k = 5, "agnes", graph = FALSE, hc_method = "single")
index <- setids(c$cluster)
index
c <- eclust(vectors, k = 5, "agnes", graph = FALSE, hc_method = "single")
index <- setids(c$cluster)
index
intern <- clValid(vectors_matrix, 16, clMethods=c("agnes"),
validation="internal", method = "complete")
#
# complete
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "complete")
c <- eclust(vectors, k = 5, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
#
# average
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "average")
c <- eclust(vectors, k = 5, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
c <- eclust(vectors_matrix, k = 5, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
c <- eclust(vectors, k = 5, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
#
fviz_nbclust(vectors, hcut, k.max = 18, hc_method = "ward.D2")
c <- eclust(vectors, k = 5, "agnes", graph = FALSE, hc_method = "ward")
index <- setids(c$cluster)
index
vec_agnes <- eclust(vectors, k = 18, "agnes", graph = FALSE, hc_method = "single")
fviz_dend(vec_agnes)
# k = Anzahl Themen
c <- eclust(vectors, k = 18, "pam", graph = FALSE)
index <- setids(c$clustering)
index
# k = Anzahl Themen
c <- eclust(min_symmetrized, k = 18, "pam", graph = FALSE)
index <- setids(c$clustering)
index
install.packages(c("cluster", "factoextra", "clValid"))
library(data.table)
library(cluster)
library(factoextra)
library(clValid) #validation
# combine graph names to one list
combineListsAsOne <-function(list1, list2){
n <- c()
for(x in list1){
n<-c(n, x)
}
for(y in list2){
n<-c(n, y)
}
return(n)
}
#ids für die graphen setzen
setids <- function(integer) {
n <- matrix(c(integer), dimnames = list(graphs))
return(n)
}
#graphs numbered
graphs <- combineListsAsOne(list(0:86), NULL)
### data ###
min_symmetrized <- fread("min_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
max_symmetrized <- fread("max_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
avg_symmetrized <- fread("avg_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
vectors <- fread("vectors_lenz.txt", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
min_matrix <- matrix(c(min_matrix), nr = 87, dimnames = list(graphs))
max_matrix <- matrix(c(max_matrix), nr = 87, dimnames = list(graphs))
avg_matrix <- matrix(c(avg_matrix), nr = 87, dimnames = list(graphs))
vectors_matrix <- as.matrix(vectors)
######### min
### k-medoid
fviz_nbclust(min_symmetrized, pam, k.max = 18)
######### max
### k-medoid
fviz_nbclust(max_symmetrized, pam, k.max = 18)
intern <- clValid(max_matrix, 2, clMethods=c("pam"),
validation="internal")
summary(intern)
# k = Anzahl Themen
c <- eclust(max_matrix, k = 18, "pam", graph = FALSE)
index <- setids(c$clustering)
index
# k = Anzahl Themen
c <- eclust(avg_symmetrized, k = 18, "pam", graph = FALSE)
index <- setids(c$clustering)
index
c <- eclust(min_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "single")
index <- setids(c$cluster)
index
library(data.table)
library(cluster)
library(factoextra)
library(clValid) #validation
# combine graph names to one list
combineListsAsOne <-function(list1, list2){
n <- c()
for(x in list1){
n<-c(n, x)
}
for(y in list2){
n<-c(n, y)
}
return(n)
}
#ids für die graphen setzen
setids <- function(integer) {
n <- matrix(c(integer), dimnames = list(graphs))
return(n)
}
#graphs numbered
graphs <- combineListsAsOne(list(0:86), NULL)
### data ###
min_symmetrized <- fread("min_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
max_symmetrized <- fread("max_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
avg_symmetrized <- fread("avg_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
vectors <- fread("vectors_lenz.txt", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
c <- eclust(min_symmetrized, k = 5, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
c <- eclust(min_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
library(data.table)
library(cluster)
library(factoextra)
library(clValid) #validation
# combine graph names to one list
combineListsAsOne <-function(list1, list2){
n <- c()
for(x in list1){
n<-c(n, x)
}
for(y in list2){
n<-c(n, y)
}
return(n)
}
#ids für die graphen setzen
setids <- function(integer) {
n <- matrix(c(integer), dimnames = list(graphs))
return(n)
}
#graphs numbered
graphs <- combineListsAsOne(list(0:86), NULL)
### data ###
min_symmetrized <- fread("min_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
max_symmetrized <- fread("max_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
avg_symmetrized <- fread("avg_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
vectors <- fread("vectors_lenz.txt", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
min_matrix <- matrix(c(min_matrix), nr = 87, dimnames = list(graphs))
max_matrix <- matrix(c(max_matrix), nr = 87, dimnames = list(graphs))
avg_matrix <- matrix(c(avg_matrix), nr = 87, dimnames = list(graphs))
vectors_matrix <- as.matrix(vectors)
c <- eclust(min_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
library(data.table)
library(cluster)
library(factoextra)
library(clValid) #validation
# combine graph names to one list
combineListsAsOne <-function(list1, list2){
n <- c()
for(x in list1){
n<-c(n, x)
}
for(y in list2){
n<-c(n, y)
}
return(n)
}
#ids für die graphen setzen
setids <- function(integer) {
n <- matrix(c(integer), dimnames = list(graphs))
return(n)
}
#graphs numbered
graphs <- combineListsAsOne(list(0:86), NULL)
### data ###
min_symmetrized <- fread("min_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
max_symmetrized <- fread("max_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
avg_symmetrized <- fread("avg_symmetrized_matrix_lenz.csv", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
vectors <- fread("vectors_lenz.txt", header=FALSE, sep=";", quote="\"", strip.white=TRUE, showProgress=TRUE, encoding="UTF-8", na.strings=c("", "null"), stringsAsFactors=FALSE)
min_matrix <- matrix(c(min_matrix), nr = 87, dimnames = list(graphs))
max_matrix <- matrix(c(max_matrix), nr = 87, dimnames = list(graphs))
avg_matrix <- matrix(c(avg_matrix), nr = 87, dimnames = list(graphs))
vectors_matrix <- as.matrix(vectors)
c <- eclust(max_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
c <- eclust(avg_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
c <- eclust(vectors, k = 18, "agnes", graph = FALSE, hc_method = "complete")
index <- setids(c$cluster)
index
c <- eclust(vectors, k = 18, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
c <- eclust(vectors, k = 18, "agnes", graph = FALSE, hc_method = "ward")
index <- setids(c$cluster)
index
c <- eclust(max_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
c <- eclust(max_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "ward")
index <- setids(c$cluster)
index
c <- eclust(avg_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "average")
index <- setids(c$cluster)
index
c <- eclust(avg_symmetrized, k = 18, "agnes", graph = FALSE, hc_method = "ward")
index <- setids(c$cluster)
index
